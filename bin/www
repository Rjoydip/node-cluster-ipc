#!/usr/bin/env node

/**
 * Module dependencies.
 */
var cluster = require('cluster');
var numCPUs = require('os').cpus().length;
var debug = require('debug')('node-cluster:server');
var http = require('http');
var app = require('../app');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

if (cluster.isMaster) {
  console.log('Master cluster setting up ' + numCPUs + ' workers...');
  console.log("Server is listening on port: " + port);

  for (var i = 0; i < numCPUs; i++)
    cluster.fork();

  cluster.on('online', function (worker) {
    console.log('Worker ' + worker.process.pid + ' is online');

    worker.on('message', function (message) {
      var wid = worker.process.pid;
      if (typeof message === 'object' && message.hasOwnProperty('type') && message.type === 'SIGKILL')
        worker.process.kill('SIGKILL');
        
      console.log("Message recived on worker [" + wid + "]", message);
    });
  });

  cluster.on('exit', function (worker, code, signal) {
    console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);
    console.log('Starting a new worker');
    cluster.fork();
  });
} else {
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);

  /**
   * Listen on all network interfaces.
   */
  server.on('error', onError);
  process.on('message', onMessage);

  /**
   * Event listener for HTTP server "error" event.
   */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string' ?
      'Pipe ' + port :
      'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Message event of process
   */
  function onMessage(message) {
    if (message.type === 'shutdown') process.exit(0);
    console.log("Message recived on main process", message);
  }
}